tasklets={},function(){function a(a){return a&&a[h]}function b(a){const{port1:b,port2:c}=new MessageChannel;return g(a,b),{result:{__transfer_proxy_port:c},transferables:[c]}}function c(c){return a(c)?b(c):{result:c,transferables:f(c)}}function d(a){return a instanceof ArrayBuffer||a instanceof MessagePort}function*e(a){if('string'==typeof a)return a;if(a){const b=Object.values(a);yield*b;for(const a of b)yield*e(a)}}function f(a){return Array.from(e(a)).filter((a)=>d(a))}function g(a,b){b.onmessage=async(d)=>{const e=d.data.callPath;switch(d.data.type){case'GET':case'APPLY':{let f=await e.reduce((a,b)=>a[b],a);if('APPLY'===d.data.type){e.pop();const b=await e.reduce((a,b)=>a[b],a);f=await f.apply(b,d.data.argumentsList)}const{result:g,transferables:h}=c(f);b.postMessage({id:d.data.id,result:g},h);break}case'CONSTRUCT':{const c=e.reduce((a,b)=>a[b],a),f=new c(...d.data.argumentsList),{port1:h,port2:i}=new MessageChannel;g(f,h),b.postMessage({id:d.data.id,result:{port:i}},[i]);break}}}}const h=Symbol('transferProxy');tasklets.transferProxy=(a)=>{return a[h]=!0,a},addEventListener('message',(a)=>{try{const b={};self.tasklets.export=(a,c='')=>{c||(c=a.name),b[c]=a},importScripts(a.data.path);const{port1:c,port2:d}=new MessageChannel;g(b,c),delete self.tasklets.export,postMessage({id:a.data.id,port:d},[d])}catch(b){postMessage({id:a.data.id,error:b.toString(),stack:b.stack})}})}();
